package kr.or.ddit.nurse.controller;

import java.util.List;
import java.util.Map;

import javax.inject.Inject;

import org.apache.commons.lang3.StringUtils;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.or.ddit.common.vo.PaginationInfoVO;
import kr.or.ddit.nurse.service.IRecordService;
import kr.or.ddit.nurse.vo.NurseRecordVO;
import kr.or.ddit.patient.service.IPatientService;
import kr.or.ddit.patient.vo.PatientVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping(value="/mediform/nurse/record")
public class NurseController {

	@Inject
	private IPatientService patientService;

	@Inject
	private IRecordService recordService;

	// 환자 list 조회 (오더수행 기존 n.record)
	@RequestMapping(value = "/list/select")
	public String patientList(@RequestParam(name = "page", required = false, defaultValue = "1") int currentPage,
			@RequestParam(required = false, defaultValue = "patntnm") String searchType,
			@RequestParam(required = false) String searchWord, PatientVO patientVO, Model model) {
		log.info("patientPagingList() 실행...!");

		PaginationInfoVO<PatientVO> pagingVO = new PaginationInfoVO<PatientVO>();

		if (StringUtils.isNotBlank(searchWord)) {
			pagingVO.setSearchType(searchType);
			pagingVO.setSearchWord(searchWord);
			model.addAttribute("searchType", searchType);
			model.addAttribute("searchWord", searchWord);
		}

		// 검색 필터 적용시
		if (patientVO != null && patientVO.isFilterFlag()) {
			pagingVO.setSearchVO(patientVO);
			model.addAttribute("patientVO", patientVO);
		}

		pagingVO.setCurrentPage(currentPage);
		int totalRecord = patientService.selectPatientCount(pagingVO);

		pagingVO.setTotalRecord(totalRecord);

		List<PatientVO> dataList = patientService.selectPatientPagingList(pagingVO);
		pagingVO.setDataList(dataList);

		model.addAttribute("pagingVO", pagingVO);

		return "nurse/order";
	}
	
	// 환자 검색(ajax)
	@ResponseBody
	@PostMapping("/patient/search")
	public List<PatientVO> patientSearch(@RequestBody Map<String, String> map) {
		
		List<PatientVO> patientList = patientService.patientSearch(map);
		
		log.info("patientList : "+ patientList);
		return patientList;
	}
	
	// 환자 정보 조회(ajax)
	@ResponseBody
	@PostMapping("/patient/info")
	public PatientVO patientInfo(@RequestBody Map<String, String> map) {
		
		PatientVO patientInfo = patientService.selectPatient(map);
		
		log.info("patientInfo : "+ patientInfo);
		return patientInfo;
	}
	
	// 환자 전체 정보 조회(ajax)
	@ResponseBody
	@PostMapping("/patient/searchList")
	public List<PatientVO> patientSearchList() {
		
		List<PatientVO> patientList = patientService.selectPatientList();
		
		log.info("patientList : "+ patientList);
		return patientList;
	}
		

	// 병동 관리 환자 list 조회
	@RequestMapping(value = "/room/list/select")
	public String roomPatientList(Model model) {
		log.info("roomPatientList() 실행...!");

		List<PatientVO> patientList = patientService.selectPatientList();
		log.info("roomPatientList>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>" + patientList);

		model.addAttribute("patientList", patientList);

		return "nurse/room";
	}

	// 간호기록차트 ---- 해당 환자 모달창에 상세 정보 띄우기
	@ResponseBody
	@RequestMapping("/getPatientDetails")
	public PatientVO getPatientDetails(@RequestParam String patntNo) {
		log.info("getPatientDetails() 실행...!");

		PatientVO patient = patientService.selectPatientOne(patntNo);

		return patient;
	}

	// 환자 외래진료 간호 액팅 기록 조회
	@ResponseBody
	@PostMapping("/order/list/select")
	public List<NurseRecordVO> allRecordList(@RequestBody Map<String, String> map) {
		log.info("allRecordList() 실행...!");
		List<NurseRecordVO> allRecordList = recordService.selectRecordList(map);
		log.info(">>>>>>>>>>>>>>>>>>>>>>>>>>>allRecordList : " + allRecordList);

		return allRecordList;
	}

	// 인수인계 리스트 조회
	@ResponseBody
	@PostMapping("/takeOver/list/select")
	public List<NurseRecordVO> recordTakeOverList(@RequestBody Map<String, String> map) {
		log.info("recordTakeOverList() 실행...!");
		List<NurseRecordVO> RecordList = recordService.selectTakeOverList(map);
		log.info(">>>>>>>>>>>>>>>>allRecordList : " + RecordList);

		return RecordList;
	}

	// 인수인계 갯수
	@ResponseBody
	@PostMapping("/takeOver/count")
	public int recordCount(@RequestBody NurseRecordVO nrsRcordCn) {
		log.info("recordCount() 실행...!");
		return recordService.selectTakeOverCount(nrsRcordCn);
	}

	// 인수인계 저장
	@ResponseBody
	@PostMapping("/takeOver")
	public NurseRecordVO recordTakeOverInsert(@RequestBody NurseRecordVO nurseRecordVO) {
		log.info("recordTakeOverInsert() 실행...!");

		return recordService.insertTakeOver(nurseRecordVO);
	}

}
