package kr.or.ddit.common.controller;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;
import java.util.concurrent.ConcurrentHashMap;

import javax.servlet.http.HttpSession;


import org.apache.commons.lang3.StringUtils;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.context.SecurityContextImpl;
import org.springframework.security.core.userdetails.User;
import org.springframework.web.socket.CloseStatus;
import org.springframework.web.socket.TextMessage;
import org.springframework.web.socket.WebSocketMessage;
import org.springframework.web.socket.WebSocketSession;
import org.springframework.web.socket.handler.TextWebSocketHandler;

import kr.or.ddit.common.vo.AlarmVO;
import kr.or.ddit.security.CustomUser;
import lombok.extern.slf4j.Slf4j;


@Slf4j
public class AlarmHandler extends TextWebSocketHandler {


	
	// 소켓에 접속한 인원들을 담기 위한 리스트 객체 생성
		List<WebSocketSession> sessionList = new ArrayList<WebSocketSession>();
		Map<String, WebSocketSession> userSessions = new HashMap<String, WebSocketSession>();
		
		//HttpSession과 WebSocketSession은 다름
		@Override
		public void afterConnectionEstablished(WebSocketSession session) throws Exception {
			log.info("afterConnectionEstablished() 실행...!! 클라이언트 서버 접속 연결 성공...! : "+ session);
			//log.info("체킁:");
			log.info("session : " +  getId(session));
			session.sendMessage(new TextMessage(getId(session)));
			// 현재 소켓에 접속한 인원들 리스트에 모두 담는다.
			//sessionList.add(session);
			//String senderId = getId(session);
			//userSessions.put(senderId, session);
			
			//super.afterConnectionEstablished(session);
		}


		@Override
		protected void handleTextMessage(WebSocketSession session, TextMessage message) throws Exception {
			log.info("handleTextMessage() 실행...!! 메세지 전송 시도 성공...!");
			log.info("메세지야 들어오아라..."+ message.getPayload().toString()); 
			
//			log.info("handleTextMessage에 들어온 세션과 메세지"+ session + ": "+ message);
			
			
			// jsp 페이지에서 쏴준 아이디 값
//			String senderId =  message.getPayload().toString();
			
			String senderId = getId(session);
			log.info("소켓 컨트롤러에서 로그인한 아이디 값 추출 : "+senderId);
			
			// 모든 유저에게 보내기
//			for(WebSocketSession sessionOne : sessionList) {
//				// jsp 페이지에 ws.onmessage로 메세지를 보내준다. 
//				sessionOne.sendMessage(new TextMessage(senderId + " : " + message));
//			}
			
			String msg = message.getPayload();
			if(StringUtils.isNotEmpty(msg)) {
				String[] strs = msg.split(",");
				
				if(strs != null && strs.length == 4) {
					String alarmCnt = strs[0];
					String aContent = strs[1];
					String boardWriter = strs[2];
					String aNo = strs[3];
					
					WebSocketSession boardWriterSession = userSessions.get(boardWriter);
					log.info("boardWriterSession >>>>>>>>>>>>>" + boardWriterSession);
					if(boardWriterSession != null) {
						TextMessage tmpMsg = new TextMessage("미확인 알람 갯수 : "+alarmCnt+"<br>"+"<a href='/notice/updateAlarm.do?aNo="+aNo+"'>"+aContent+"</a>");
						boardWriterSession.sendMessage(tmpMsg);
					}
				}
				
			}
			
			// 받은 메시지를 
//			super.handleTextMessage(session, message);
		}

		@Override
		public void afterConnectionClosed(WebSocketSession session, CloseStatus status) throws Exception {
			log.info("afterConnectionClosed() 실행...!! 서버 연결 종료...!");
		}
		
		private String getId(WebSocketSession session) {
			SecurityContextImpl secContextImpl = null;
			String id = null;
			Map<String, Object> httpSession = session.getAttributes();
			Set<Entry<String, Object>> entrySet = httpSession.entrySet();
			Iterator<Entry<String, Object>> entryIte = entrySet.iterator();
			while(entryIte.hasNext()) {
				Entry<String, Object> entry = entryIte.next();
				String key = entry.getKey();
				log.info("key : " + key);
				if(key.equals("SPRING_SECURITY_CONTEXT")){
					secContextImpl = (SecurityContextImpl)httpSession.get("SPRING_SECURITY_CONTEXT");
					log.info("security context : " + secContextImpl);
					
				}
			}
			
			CustomUser user = (CustomUser) secContextImpl.getAuthentication().getPrincipal();
			id =  user.getEmployee().getEmpNo();
			if(null == user.getUsername()) {
				id = session.getId();
			}
			return id;
		}
	}
