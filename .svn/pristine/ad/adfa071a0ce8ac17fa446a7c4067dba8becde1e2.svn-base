package kr.or.ddit.manager.controller;

import java.io.UnsupportedEncodingException;
import java.util.List;
import java.util.Map;

import javax.inject.Inject;
import javax.mail.MessagingException;

import org.apache.commons.lang3.StringUtils;
import org.apache.ibatis.annotations.Param;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import kr.or.ddit.administration.ServiceResult;
import kr.or.ddit.administration.vo.NoticeBoardVO;
import kr.or.ddit.common.vo.EmployeeVO;
import kr.or.ddit.common.vo.PaginationInfoVO;
import kr.or.ddit.manager.service.IManagerService;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping(value="/mediform/manager/employee")
public class ManagerEmployeeController {

	@Inject
	private IManagerService managerService; 
	
		// 회원가입 신청 내역 확인 페이지
		@RequestMapping(value="/select")
		public String employeeConfirm(
				@RequestParam(name = "page", required = false, defaultValue = "1") int currentPage,
				@RequestParam(required = false, defaultValue = "default") String searchType,
				@RequestParam(required = false) String searchWord, 
				@RequestParam(required = false, defaultValue = "employee")String listType,
				Model model) {
			log.info("employeeConfirm() 실행");
			log.info("searchType : " + searchType);
			log.info("listType : " + listType);
			log.info("searchWord : " + searchWord);
			log.info("currentPage : " + currentPage );
			paginationInfoSettings(currentPage, searchType, searchWord, listType, model);
			// 직원 조회
			
			return "manager/empConfirm";
		}
		
		private void paginationInfoSettings(
				int page, String searchType, String searchWord, String listType, Model model){
			PaginationInfoVO<EmployeeVO> pagingVO = new PaginationInfoVO<EmployeeVO>();
			
			pagingVO.setSearchType(searchType);
			model.addAttribute("searchType", searchType);
			
			if(StringUtils.isNotBlank(searchWord)) {
				pagingVO.setSearchWord(searchWord);
				model.addAttribute("searchWord", searchWord);
			}
			
			EmployeeVO employeeVO = new EmployeeVO();
			employeeVO.setEtcType(listType);
			pagingVO.setSearchVO(employeeVO);
			model.addAttribute("flagSelect", listType);
			
			pagingVO.setCurrentPage(page);
			int totalRecord = managerService.selectEmpCount(pagingVO); // 총 게시글 수
			
			pagingVO.setTotalRecord(totalRecord); // totalpage 결정
			List<EmployeeVO> dataList = managerService.selectEmpList(pagingVO);
			pagingVO.setDataList(dataList);
			
			model.addAttribute("pagingVO", pagingVO);
		}
		
		
		// 상세 조회
		@PostMapping(value="/getEmployee")
		public ResponseEntity<EmployeeVO> getEmployee(@RequestBody Map<String, String>map){
			log.info("getEmployee() 실행");
			String empNo = map.get("empNo");
			EmployeeVO empVO = managerService.getEmployee(empNo);
			
			return new ResponseEntity<EmployeeVO>(empVO, HttpStatus.OK); 
		}
		
		// 반려 처리
		@PostMapping(value="/rejectUpdate")
		public String rejectUpdate(EmployeeVO empVO, RedirectAttributes ra, Model model) throws MessagingException, UnsupportedEncodingException{
			log.info("rejectUpdate() 실행");
			ServiceResult result = managerService.rejectUpdate(empVO);
			if(result.equals(ServiceResult.OK)) {
				ra.addFlashAttribute("msg", "정상적으로 처리 되었습니다.");
				ra.addFlashAttribute("thisPage", "confirmList");
			}else {
				ra.addFlashAttribute("msg", "해당 요청 실행 중 오류가 발생했습니다.");
			}
			return "redirect:/mediform/manager/employee/select";
		}
		
		// 승인 처리
		@PostMapping(value="/agree")
		public String agreeEmployee(EmployeeVO empVO, RedirectAttributes ra, Model model) throws UnsupportedEncodingException, MessagingException {
			log.info("agreeEmployee() 실행");
			ServiceResult result = managerService.agreeEmployee(empVO);
			if(result.equals(ServiceResult.OK)) {
				ra.addFlashAttribute("msg", "정상적으로 처리 되었습니다.");
				ra.addFlashAttribute("thisPage", "confirmList");
			}else {
				ra.addFlashAttribute("msg", "해당 요청 실행 중 오류가 발생했습니다.");
			}
			return "redirect:/mediform/manager/employee/select";
		}
		
		// 회원 수정
		@PostMapping(value="update")
		public String employeeUpdate(@RequestParam Map<String, String> map, RedirectAttributes ra) {
			log.info("employeeUpdate() 실행");
			String check = map.get("empHffcAt");
			EmployeeVO empVO = new EmployeeVO();
			empVO.setEmpNo(map.get("empNo"));
			empVO.setEmpClsf(map.get("empClsf"));
			int deleteAuthRst = 0;
			int deleteEmpRst = 0;
			int updateResult = 0;
			
			// 퇴직 체크시 권한 삭제, 퇴직 일시 추가
			if(check != null && check.equals("N")) {
				// 퇴직 직원 권한 삭제
				empVO.setEmpHffcAt("N");
				deleteAuthRst = managerService.deleteAuth(empVO);
				deleteEmpRst = managerService.retireEmp(empVO);
				if(deleteAuthRst > 0 && deleteEmpRst > 0) {
					ra.addFlashAttribute("msg", "정상적으로 처리 되었습니다.");
				}else {
					ra.addFlashAttribute("msg", "해당 요청 실행 중 오류가 발생했습니다.");
				}
			}else{
				// 직원 권한 수정시
				empVO.setEmpClsf(map.get("empClsf"));
				updateResult = managerService.updateEmp(empVO);
				if(updateResult > 0) {
					ra.addFlashAttribute("msg", "정상적으로 처리 되었습니다.");
				}else {
					ra.addFlashAttribute("msg", "해당 요청 실행 중 오류가 발생했습니다.");
				}
			}
			
			return "redirect:/mediform/manager/employee/select";
		}
		
		@GetMapping(value="/temp")
		public String tempPage() {
			return "manager/temp";
		}
		
		
	
}
