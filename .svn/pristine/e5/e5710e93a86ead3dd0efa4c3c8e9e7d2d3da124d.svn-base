package kr.or.ddit.calender.controller;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import javax.inject.Inject;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import kr.or.ddit.calender.service.IModuleCanlenderService;
import kr.or.ddit.calender.vo.ModuleCalenderVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/mediform/calender")
public class ModuleCalenderController {
	
	@Inject
	private IModuleCanlenderService moduleCalenderService;
	
	@RequestMapping("/module/main")
	public String main() {
		return "module/calender";
	}

	// 이벤트 조회
	@GetMapping("module/update")
	@ResponseBody
	public List<Map<String, Object>> showAllEventInUpdate() throws Exception{
		
		JSONObject jsonObj = new JSONObject();
		JSONArray jsonArr = new JSONArray();
		
		HashMap<String, Object> hash = new HashMap<>();
		
		List<ModuleCalenderVO> moduleCalenderList = moduleCalenderService.moduleCalenderList();
		
		for(ModuleCalenderVO moduleCalender : moduleCalenderList) {
			hash.put("id", moduleCalender.getSchdlCd());
			hash.put("title", moduleCalender.getSchdlNm());
			hash.put("start", moduleCalender.getSchdlBgngDt());
			hash.put("end", moduleCalender.getSchdlEndDt());
			
			jsonObj = new JSONObject(hash);
			jsonArr.add(jsonObj);
		}
		log.info("jsonArrCheck:{}",jsonArr);
		return jsonArr;
	}
	
	// 이벤트 등록
	@PostMapping("/module/update")
	@ResponseBody
	public String addEvent(@RequestBody List<Map<String, Object>> param) {
		
		 DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", Locale.KOREA);
		 
        for (Map<String, Object> list : param) {
 
            String eventName = (String) list.get("title"); // 이름 받아오기
            String startDateString = (String) list.get("start");
            String endDateString = (String) list.get("end");
             
            LocalDateTime startDateUTC = LocalDateTime.parse(startDateString, dateTimeFormatter);
            LocalDateTime endDateUTC = LocalDateTime.parse(endDateString, dateTimeFormatter);
            
            LocalDateTime startDate = startDateUTC.plusHours(9);
            LocalDateTime endDate = endDateUTC.plusHours(9);
            
            ModuleCalenderVO svo = new ModuleCalenderVO();
            
            svo.setSchdlNm(eventName);
            svo.setSchdlBgngDt(String.valueOf(startDate));
            svo.setSchdlEndDt(String.valueOf(endDate));
            
            this.moduleCalenderService.moduleCalenderInsert(svo);
          }
        return "/mediform/common/scheduler/update";
	}
	
	// 이벤트 삭제
	@DeleteMapping("/module/update")
	@ResponseBody
	public String deleteEvent(@RequestBody List<Map<String, Object>> param) {
		
		int result = 0;
		
	  DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", Locale.KOREA);
		
		for(Map<String, Object> list : param) {
		String startDateString =  (String)list.get("start");
						
		log.info("startDate : " + startDateString);
		
		LocalDateTime startDate = LocalDateTime.parse(startDateString, dateTimeFormatter);
		
		log.info("startDateUTC : " + startDate);
		
		result = this.moduleCalenderService.moduleCalenderDelete(String.valueOf(startDate));
		}
		
		if(result>0) {
			return "/mediform/common/scheduler/main";	
		}else {
			return "/mediform/common/scheduler/update";
		}
	}
	
	// 이벤트 수정
	@PatchMapping("/module/update")
	@ResponseBody
	public String modifyEvent(@RequestBody List<Map<String, Object>>param) {
		
		int result = 0;
		
		DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", Locale.KOREA);
		
		for(Map<String, Object> list : param) {
			
			String eventName = (String)list.get("title"); // 이름 받아오기
			String startDateString = (String)list.get("start"); // 시작 시간
			String endDateString = (String)list.get("end"); // 끝나는 시간
			
			String oldStartString = (String)list.get("oldStart");
			String oldEndString = (String)list.get("oldEnd");
			
			LocalDateTime modifiedStartDate = LocalDateTime.parse(startDateString, dateTimeFormatter);
            LocalDateTime modifiedEndDate = LocalDateTime.parse(endDateString, dateTimeFormatter);
            LocalDateTime oldStart = LocalDateTime.parse(oldStartString, dateTimeFormatter);
            LocalDateTime oldEnd = LocalDateTime.parse(oldEndString, dateTimeFormatter);
            
            ModuleCalenderVO schedulerVO = new ModuleCalenderVO();
            schedulerVO.setSchdlNm(eventName);
            schedulerVO.setSchdlBgngDt(String.valueOf(modifiedStartDate));
            schedulerVO.setSchdlEndDt(String.valueOf(modifiedEndDate));
            schedulerVO.setScheduleDateOldTimeStart(String.valueOf(oldStart));
            schedulerVO.setScheduleDateOldTimeEnd(String.valueOf(oldEnd));
            
            log.info("update : " + schedulerVO.toString());
            
           result =  this.moduleCalenderService.moduleCalenderUpdate(schedulerVO);
		}
		
		if(result>0) {
			return "/mediform/common/scheduler/main";	
		}else {
			return "/mediform/common/scheduler/update";
		}
	}
}
