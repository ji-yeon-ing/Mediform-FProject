package kr.or.ddit.nurse.controller;

import java.io.File;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.inject.Inject;
import javax.servlet.http.HttpServletRequest;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;


import kr.or.ddit.calender.ServiceResult;
import kr.or.ddit.common.vo.FileVO;
import kr.or.ddit.doctor.service.IDoctorClinicService;
import kr.or.ddit.doctor.vo.ClinicAssignmentVO;
import kr.or.ddit.doctor.vo.ClinicVO;
import kr.or.ddit.doctor.vo.MedicalExaminationOrderVO;
import kr.or.ddit.nurse.service.IActingService;
import kr.or.ddit.nurse.vo.VitalVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping(value = "/mediform/nurse/acting")
public class NurseActingController {

	@Inject
	private IDoctorClinicService doctorClinicService;

	@Inject
	private IActingService actingService;

	// 진료 메인 페이지
	@RequestMapping("/main")
	public String clinicMain(Model model) {
		log.info("clinicMain() 실행중...!");

		// 로그인 정보
		String doctorNo = "d20230085";
		ClinicAssignmentVO clinicAssignmentVO = doctorClinicService.selectclinicAssigment(doctorNo);
		String clinicNo = clinicAssignmentVO.getClnicNo().substring(1, 2);

		model.addAttribute("clinicNo", clinicNo);
		return "nurse/acting";
	}

	// 대기환자 리스트 (의사 번호)
	@ResponseBody
	@RequestMapping("/list")
	public List<ClinicVO> selectwaitingList() {
		log.info("receiptList() 실행중...!");

		// 로그인 정보
		String doctorNo = "d20230085";
		List<ClinicVO> waitingList = doctorClinicService.selectwaitingList(doctorNo); // 대기환자정보

		return waitingList;
	}

	// 바이탈 insert
	@ResponseBody
	@RequestMapping(value = "/vital/insert", method = RequestMethod.POST)
	public List<VitalVO> vitalResultInsert(@RequestBody Map<String, String> map) {
		
		ServiceResult result = actingService.vitalResultInsert(map);

		if (result.equals(ServiceResult.OK)) {
			log.info("바이탈 인서트 성공 인서트 성공");
		} else {
			log.info("바이탈 실패ㅠㅠㅠ");
		}

		List<VitalVO> vitalList = null;

		return vitalList;
	}

	// 검사결과 insert
	@ResponseBody
	@RequestMapping(value = "/exam/insert", method = RequestMethod.POST)
	public List<MedicalExaminationOrderVO> examResultInsert(@RequestBody Map<String, String> map) {

		ServiceResult result = actingService.examResultInsert(map);

		if (result.equals(ServiceResult.OK)) {
			log.info("검사결과 인서트 성공");
		} else {
			log.info("검사결과 인서트 실패ㅠㅠㅠ");
		}

		List<MedicalExaminationOrderVO> examList = null;

		return examList;
	}

	// 환자 바이탈 조회 (ajax)

	@ResponseBody
	@PostMapping("/vital")
	public List<VitalVO> vital(@RequestBody Map<String, String> map) {

		List<VitalVO> vitalList = actingService.selectVitalList(map);

		return vitalList;
	}
	

	@PostMapping("/uploadXRay")
	public String uploadFile(FileVO fileVO, HttpServletRequest req) {
	    MultipartFile multipartFile = fileVO.getItem();
	    
	    if(multipartFile != null && !multipartFile.isEmpty()) {
	        // 파일 저장 로직
	        String uploadPath = req.getServletContext().getRealPath("/resources/uploads");
	        String originalFileName = multipartFile.getOriginalFilename();
	        String extension = originalFileName.substring(originalFileName.lastIndexOf("."));
	        String savedFileName = UUID.randomUUID().toString() + extension;
	        
	        File savedFile = new File(uploadPath, savedFileName);
	        if(!savedFile.getParentFile().exists()) {
	            savedFile.getParentFile().mkdirs();
	        }
	        
	        try {
	            multipartFile.transferTo(savedFile);
	            
	            fileVO.setFileNM(originalFileName);
	            fileVO.setFileExtsn(extension);
	            fileVO.setFileFlpth(savedFile.getAbsolutePath());

	            
	            
	        } catch(IOException e) {
	            e.printStackTrace();
	        }
	    }
	    return null;
	}
    
    
}