package kr.or.ddit.nurse.controller;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import javax.imageio.ImageIO;

import com.google.zxing.BarcodeFormat;
import com.google.zxing.EncodeHintType;
import com.google.zxing.MultiFormatWriter;
import com.google.zxing.WriterException;
import com.google.zxing.common.BitMatrix;

public class BarcodeController {

    public static void main(String[] args) {
        String barcodeData = "Hello, World!"; // 바코드에 담을 데이터

        String filePath = "barcode.png"; // 바코드 이미지를 저장할 파일 경로
        int width = 300; // 바코드 이미지의 가로 크기
        int height = 300; // 바코드 이미지의 세로 크기

        // 바코드 포맷과 인코딩 설정
        Map<EncodeHintType, Object> hints = new HashMap<>();
        hints.put(EncodeHintType.CHARACTER_SET, "UTF-8");

        try {
            // 바코드를 생성
            BitMatrix matrix = new MultiFormatWriter().encode(barcodeData, BarcodeFormat.QR_CODE, width, height, hints);

            // BitMatrix를 BufferedImage로 변환
            BufferedImage image = new BufferedImage(width, height, BufferedImage.TYPE_INT_RGB);
            for (int x = 0; x < width; x++) {
                for (int y = 0; y < height; y++) {
                    image.setRGB(x, y, matrix.get(x, y) ? 0x000000 : 0xFFFFFF);
                }
            }

            // 이미지를 파일로 저장
            File barcodeFile = new File(filePath);
            ImageIO.write(image, "png", barcodeFile);

            System.out.println("바코드가 생성되었습니다.");

        } catch (WriterException | IOException e) {
            e.printStackTrace();
        }
    }
}

