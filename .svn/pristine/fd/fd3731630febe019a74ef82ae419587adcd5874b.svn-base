package kr.or.ddit.common.controller;

import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import javax.inject.Inject;

import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;

import com.google.gson.JsonObject;

import kr.or.ddit.common.service.ISchedulerService;
import kr.or.ddit.common.vo.SchedulerVO;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@Controller
@RequestMapping("/mediform/scheduler")
public class SchedulerController {

	@Inject
	private ISchedulerService scheduleservice;

	// 스케줄러 컨트롤러
	@RequestMapping(value = "/main", method = { RequestMethod.GET, RequestMethod.POST })
	public String scheduler() {
		log.info("scheduler() 시작");
		return "nurse/scheduler";
	}

	// 일정 추가
	@PostMapping(value = "/addEventForm")
	@ResponseBody
	public int schedulerForm(@RequestBody SchedulerVO scheduler) {
		log.info("schedulerForm() 시작");
		log.info("scheduler:" + scheduler);

		return scheduleservice.schedulerinsert(scheduler);

	}

	
	//일정 조회
	
	@GetMapping("/eventList")
	@ResponseBody 
	public List<Map<String, Object>> schedulerEventList(){
		log.info("schedulerEventList() 시작");
		JSONObject jsonObj = new JSONObject(); 
		JSONArray jsonArr = new JSONArray();
		
		HashMap<String, Object> hash = new HashMap<>();
		
		List<SchedulerVO> list = scheduleservice.findAllSchedule();
		
		for(SchedulerVO schedule : list) {
			hash.put("schdlCd", schedule.getSchdlCd()); //코드
			hash.put("title", schedule.getSchdlNm()); //일정명
			hash.put("description", schedule.getSchdlCn());//일정내용
			hash.put("pstgDt", schedule.getPstgDt()); //게시일
			hash.put("start", schedule.getSchdlBgngDt()); //일정시작
			hash.put("end", schedule.getSchdlEndDt()); //일정끝
			hash.put("color", schedule.getSchdlColor());//색깔
			hash.put("allDay", schedule.getSchdlAllDay());//전체일정
			
			log.info("id: "+schedule.getSchdlCd());
			jsonObj =new JSONObject(hash);
			jsonArr.add(jsonObj);
		}
		log.info("제이슨 배열 :" + jsonArr);
		return jsonArr;
		
	}
	
	
	// 이벤트 삭제
		@PostMapping("/eventdelete")
		@ResponseBody
		public String deleteEvent(@RequestBody String schdlCd) {
			log.info("deleteEvent() 시작");
			int result = 0;
			String[] id = schdlCd.split("=");
			
			
			result = this.scheduleservice.delete(id[0]);
			
			log.info("schdlCd:::::::::::::::"+id[0]);
			if(result>0) {
				return "/mediform/scheduler/main";	
			}else {
				return "/mediform/scheduler/eventdelete";
			}
		}
		
		// 이벤트 수정
		@PatchMapping("/eventupdate")
		@ResponseBody
		public String modifyEvent(@RequestBody List<Map<String, Object>>param) {
			log.info("modifyEvent() 시작");
			int result = 0;
			
			DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'", Locale.KOREA);
			
			for(Map<String, Object> list : param) {
				
				String schdlNm = (String)list.get("title"); // 이름 받아오기
				String schdlBgngDt = (String)list.get("start"); // 시작 시간
				String schdlEndDt = (String)list.get("end"); // 끝나는 시간
				
				String oldStartString = (String)list.get("oldStart");
				String oldEndString = (String)list.get("oldEnd");
				
				LocalDateTime modifiedStartDate = LocalDateTime.parse(schdlBgngDt, dateTimeFormatter);
	            LocalDateTime modifiedEndDate = LocalDateTime.parse(schdlEndDt, dateTimeFormatter);
	            LocalDateTime oldStart = LocalDateTime.parse(oldStartString, dateTimeFormatter);
	            LocalDateTime oldEnd = LocalDateTime.parse(oldEndString, dateTimeFormatter);
	            
	            SchedulerVO scheduleVO = new SchedulerVO();
	            scheduleVO.setSchdlNm(schdlNm);
	            scheduleVO.setSchdlBgngDt(String.valueOf(modifiedStartDate));
	            scheduleVO.setSchdlEndDt(String.valueOf(modifiedEndDate));
	            scheduleVO.setScheduleDateOlidTimeStart(String.valueOf(oldStart));
	            scheduleVO.setScheduleDateOlidTimeEnd(String.valueOf(oldEnd));
	            
	            log.info("update : " + scheduleVO.toString());
	            
	           result =  this.scheduleservice.update(scheduleVO);
			}
			
			if(result>0) {
				return "/mediform/scheduler/main";	
			}else {
				return "/mediform/scheduler/eventupdate";
			}
		}
	
	
	
	
	
	
	
	
	
	
	
}
